from flask import Flask, render_template, request, redirect, url_for, session, g, flash, jsonify
import sqlite3
from werkzeug.security import generate_password_hash, check_password_hash
import datetime
import re
import random
from functools import wraps

app = Flask(__name__)
app.secret_key = 'your_secret_key_here'

DATABASE = 'database.db'

def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if not g.user:
            return redirect(url_for('login'))
        return f(*args, **kwargs)
    return decorated_function

translations = {
    'en': {
        'title': 'Interactive Online Utility Payment',
        'description': 'Welcome to the online platform for convenient payment of your utility bills.',
        'login': 'Login',
        'register': 'Register',
        'logout': 'Logout',
        'username': 'Username',
        'password': 'Password',
        'confirm_password': 'Confirm Password',
        'submit': 'Submit',
        'dashboard': 'Dashboard',
        'welcome_user': 'Welcome,',
        'bills': 'Your Utility Bills',
        'amount': 'Amount',
        'due_date': 'Due Date',
        'status': 'Status',
        'paid': 'Paid',
        'unpaid': 'Unpaid',
        'pay': 'Pay',
        'payment_history': 'Payment History',
        'date': 'Date',
        'language': 'Language',
        'change_lang': 'Change Language',
        'registration': 'Registration',
        'error_user_exists': 'Username already exists',
        'error_password_mismatch': 'Passwords do not match',
        'error_invalid_credentials': 'Invalid username or password',
        'payment_success': 'Payment successful',
        'pay_bill': 'Pay Bill',
        'no_payments': 'No payments made yet.',
        'home': 'Home',
        'news_title_1': 'Electricity Price Increase',
        'news_content_1': 'Starting next month, the electricity tariff will increase by 5%, affecting all households.',
        'news_title_2': 'New Payment Methods',
        'news_content_2': 'We have introduced payments via popular mobile wallets for your convenience.',
        'news_title_3': 'Scheduled Maintenance',
        'news_content_3': 'Our platform will undergo maintenance on the 20th. Please plan your payments accordingly.',
        'news_title_4': 'New Mobile App',
        'news_content_4': 'We are excited to announce the launch of our new mobile application! Now you can manage your utility payments on the go.',
        'select_language': 'Select Language',
        'uzbek': 'Uzbek',
        'russian': 'Russian',
        'english': 'English',
        'passport_number': 'Passport Number & Series',
        'phone_number': 'Phone Number',
        'email': 'Email (optional)',
        'water_supply': 'Water Supply',
        'electricity': 'Electricity',
        'gas_supply': 'Gas Supply',
        'sewage': 'Sewage',
        'heating': 'Heating',
        'waste_disposal': 'Waste Disposal',
        'current_month_info': 'Current Month Information',
        'consumption': 'Consumption',
        'tariff': 'Tariff',
        'total_amount': 'Total Amount',
        'select_month': 'Select Month',
        'select_year': 'Select Year',
        'view': 'View',
        'january': 'January',
        'february': 'February',
        'march': 'March',
        'april': 'April',
        'may': 'May',
        'june': 'June',
        'july': 'July',
        'august': 'August',
        'september': 'September',
        'october': 'October',
        'november': 'November',
        'december': 'December',
        'last_paid_receipts': 'Last Paid Receipts',
        'receipt_number': 'Receipt Number',
        'payment_date': 'Payment Date',
        'login_as_staff': 'Login as Staff',
        'login_as_user': 'Login as User',
        'staff_key': 'Staff Key',
        'login_another_way': 'Login Another Way',
        'choose_auth_method': 'Choose Authentication Method',
        'service_not_connected': 'This service is not yet connected by the student',
        'username_requirements': 'Username must be 3-20 characters long and contain only letters, numbers, and underscores',
        'password_requirements': 'Password must be at least 8 characters long and contain both letters and numbers',
        'passport_requirements': 'Passport number must be 2 uppercase letters followed by 7 digits',
        'phone_requirements': 'Phone number must start with +998 followed by 9 digits',
        'username_error': 'Invalid username format',
        'password_error': 'Invalid password format',
        'password_mismatch': 'Passwords do not match',
        'passport_error': 'Invalid passport number format',
        'phone_error': 'Invalid phone number format',
        'email_error': 'Invalid email format',
        'registration_success': 'Registration successful! Please log in.',
        'username_exists': 'Username already exists',
        'please_correct_errors': 'Please correct the errors in the form',
        'admin_dashboard': 'Admin Dashboard',
        'enter_username': 'Enter username',
        'search_user': 'Search User',
        'user_found': 'User found in database',
        'user_not_found': 'User not found in database',
        'generate_receipts': 'Generate Receipts',
        'payment_for': 'Payment For',
        'show_users': 'Show Users',
        'hide_users': 'Hide Users',
        'full_name': 'Full Name',
        'address': 'Address',
        'account_number': 'Account Number',
        'save_changes': 'Save Changes',
        'housing_type': 'Housing Type',
        'registered': 'Registered',
        'last_login': 'Last Login',
        'notifications': 'Notifications'
    },
    'ru': {
        'title': '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥ ArtPay',
        'headword': '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥',
        'description': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –æ–Ω–ª–∞–π–Ω-–ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è —É–¥–æ–±–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤–∞—à–∏—Ö –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥.',
        'login': '–í–æ–π—Ç–∏',
        'register': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
        'logout': '–í—ã–π—Ç–∏',
        'username': '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        'password': '–ü–∞—Ä–æ–ª—å',
        'confirm_password': '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å',
        'submit': '–û—Ç–ø—Ä–∞–≤–∏—Ç—å',
        'dashboard': '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
        'personal_account': '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
        'payments': '–ü–ª–∞—Ç–µ–∂–∏',
        'welcome_user': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å,',
        'bills': '–í–∞—à–∏ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è',
        'amount': '–°—É–º–º–∞',
        'due_date': '–°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã',
        'status': '–°—Ç–∞—Ç—É—Å',
        'paid': '–û–ø–ª–∞—á–µ–Ω–æ',
        'unpaid': '–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ',
        'pay': '–û–ø–ª–∞—Ç–∏—Ç—å',
        'payment_history': '–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π',
        'date': '–î–∞—Ç–∞',
        'language': '–Ø–∑—ã–∫',
        'change_lang': '–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫',
        'registration': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
        'error_user_exists': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
        'error_password_mismatch': '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç',
        'error_invalid_credentials': '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å',
        'payment_success': '–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω',
        'pay_bill': '–û–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç',
        'no_payments': '–ü–ª–∞—Ç–µ–∂–∏ –µ—â–µ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏–ª–∏—Å—å.',
        'home': '–ì–ª–∞–≤–Ω–∞—è',
        'news_title_1': '–ü–æ–≤—ã—à–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é',
        'news_content_1': '‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é\n\n–£–≤–∞–∂–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏!\n\n–°–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –ø–ª–∞–Ω–æ–≤–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é.\n\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∏—Ç +5% –∏ –∑–∞—Ç—Ä–æ–Ω–µ—Ç –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤ –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.\n\n–≠—Ç–æ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–æ —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ –ø–æ—Å—Ç–∞–≤–∫–∏ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏, –∞ —Ç–∞–∫–∂–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å—é –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã —ç–Ω–µ—Ä–≥–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è.\n\n–ú—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –∑–∞—Ä–∞–Ω–µ–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–æ–≤—ã–º–∏ —Ç–∞—Ä–∏—Ñ–∞–º–∏ –≤ –≤–∞—à–µ–º –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∑–∫–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤.\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ.',
        'news_title_2': '–ù–æ–≤—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã',
        'news_content_2': 'üí° –ú—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ç–µ–º, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –æ–ø–ª–∞—Ç—É –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–¥–æ–±–Ω–æ–π –∏ –±—ã—Å—Ç—Ä–æ–π –¥–ª—è –Ω–∞—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. üì± –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å —Å—á–µ—Ç–∞ –Ω–µ —Ç–æ–ª—å–∫–æ —Å –ø–æ–º–æ—â—å—é –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –∫–∞—Ä—Ç, –Ω–æ –∏ —á–µ—Ä–µ–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–±–∏–ª—å–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏:üí≥ Clicküí∏ Paymeüì≤ Apelsinüíº Uzcard/MasterCard —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—èüè¶ –ü—Ä—è–º—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã —á–µ—Ä–µ–∑ –æ–Ω–ª–∞–π–Ω-–±–∞–Ω–∫–∏–Ω–≥üéØ –≠—Ç–∏ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤—Å–µ–≥–æ –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–∏–∫–æ–≤, –±–µ–∑ –æ—á–µ—Ä–µ–¥–µ–π –∏ –±—É–º–∞–∂–Ω–æ–π –≤–æ–ª–æ–∫–∏—Ç—ã.‚è∞ –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ, –∏ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –∫–≤–∏—Ç–∞–Ω—Ü–∏—é —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã. üîê –ö—Ä–æ–º–µ —Ç–æ–≥–æ, —Å–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ–∑–æ–ø–∞—Å–Ω–∞ ‚Äî –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∑–∞—â–∏—Ç—ã.',
        'news_title_3': '–ü–ª–∞–Ω–æ–≤–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ',
        'news_content_3': 'üõ† –ü–ª–∞–Ω–æ–≤–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µüì¢ –£–≤–∞–∂–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏!–ù–∞—à–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø–ª–∞–Ω–æ–≤–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ üß∞ 20-–≥–æ —á–∏—Å–ª–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞.üïò –í —ç—Ç–æ –≤—Ä–µ–º—è –≤–æ–∑–º–æ–∂–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–±–æ–∏ –≤ —Ä–∞–±–æ—Ç–µ —Å–∞–π—Ç–∞, –≤–∫–ª—é—á–∞—è:‚ùå –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Ö–æ–¥–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏,üí≥ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω-–ø–ª–∞—Ç–µ–∂–µ–π,üìâ –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—á–µ—Ç–∞—Ö.–ú—ã –ø—Ä–æ–≤–æ–¥–∏–º —ç—Ç–∏ —Ä–∞–±–æ—Ç—ã –¥–ª—è:üîí –ø–æ–≤—ã—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö,üöÄ —É–ª—É—á—à–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–∏—Å–∞,üßπ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –º–µ–ª–∫–∏—Ö –æ—à–∏–±–æ–∫.üîî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–∞–Ω–µ–µ –ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –æ–ø–ª–∞—Ç—É —Å—á–µ—Ç–æ–≤, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ—É–¥–æ–±—Å—Ç–≤ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Ö—Ä–∞–±–æ—Ç.‚úÖ –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç —Ä–∞–±–æ—Ç—É –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ, –∏ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä–µ–º–µ.üôè –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ —Ç–µ—Ä–ø–µ–Ω–∏–µ!',
        'news_title_4': '–ù–æ–≤–æ–µ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
        'news_content_4': 'üì± –ú—ã —Ä–∞–¥—ã —Å–æ–æ–±—â–∏—Ç—å –æ –∑–∞–ø—É—Å–∫–µ –Ω–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –æ–ø–ª–∞—Ç–æ–π –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –∏ –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è iOS –∏ Android. –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:üí≥ –ë—ã—Å—Ç—Ä–∞—è –æ–ø–ª–∞—Ç–∞ —Å—á–µ—Ç–æ–≤üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–πüîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å—á–µ—Ç–∞—Öüì± –£–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É–°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –æ—Ü–µ–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–æ–º—Ñ–æ—Ä—Ç–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥!',
        'select_language': '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫',
        'uzbek': '–£–∑–±–µ–∫—Å–∫–∏–π',
        'russian': '–†—É—Å—Å–∫–∏–π',
        'english': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π',
        'passport_number': '–ù–æ–º–µ—Ä –∏ —Å–µ—Ä–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞',
        'phone_number': '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
        'email': 'Email (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)',
        'water_supply': '–í–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ',
        'electricity': '–≠–ª–µ–∫—Ç—Ä–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ',
        'gas_supply': '–ì–∞–∑–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ',
        'sewage': '–í–æ–¥–æ–æ—Ç–≤–µ–¥–µ–Ω–∏–µ',
        'heating': '–û—Ç–æ–ø–ª–µ–Ω–∏–µ',
        'waste_disposal': '–í—ã–≤–æ–∑ –±—ã—Ç–æ–≤—ã—Ö –æ—Ç—Ö–æ–¥–æ–≤',
        'current_month_info': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü',
        'consumption': '–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ',
        'tariff': '–¢–∞—Ä–∏—Ñ',
        'total_amount': '–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞',
        'select_month': '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü',
        'select_year': '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥',
        'view': '–ü–æ–∫–∞–∑–∞—Ç—å',
        'january': '–Ø–Ω–≤–∞—Ä—å',
        'february': '–§–µ–≤—Ä–∞–ª—å',
        'march': '–ú–∞—Ä—Ç',
        'april': '–ê–ø—Ä–µ–ª—å',
        'may': '–ú–∞–π',
        'june': '–ò—é–Ω—å',
        'july': '–ò—é–ª—å',
        'august': '–ê–≤–≥—É—Å—Ç',
        'september': '–°–µ–Ω—Ç—è–±—Ä—å',
        'october': '–û–∫—Ç—è–±—Ä—å',
        'november': '–ù–æ—è–±—Ä—å',
        'december': '–î–µ–∫–∞–±—Ä—å',
        'last_paid_receipts': '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏',
        'receipt_number': '–ù–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏',
        'payment_date': '–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã',
        'login_as_staff': '–í–æ–π—Ç–∏ –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫',
        'login_as_user': '–í–æ–π—Ç–∏ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        'staff_key': '–ö–ª—é—á —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞',
        'login_another_way': '–í–æ–π—Ç–∏ –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º',
        'choose_auth_method': '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—Ö–æ–¥–∞',
        'service_not_connected': '–î–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç–æ–º',
        'username_requirements': '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–ª–∏–Ω–æ–π 3-20 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è',
        'password_requirements': '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–∞–∫ –±—É–∫–≤—ã, —Ç–∞–∫ –∏ —Ü–∏—Ñ—Ä—ã',
        'passport_requirements': '–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 2 –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤ –∏ 7 —Ü–∏—Ñ—Ä',
        'phone_requirements': '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å +998 –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 9 —Ü–∏—Ñ—Ä',
        'username_error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        'password_error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä–æ–ª—è',
        'password_mismatch': '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç',
        'passport_error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞',
        'phone_error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
        'email_error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email',
        'registration_success': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.',
        'username_exists': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
        'please_correct_errors': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ',
        'admin_dashboard': '–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
        'enter_username': '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        'search_user': '–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        'user_found': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
        'user_not_found': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
        'generate_receipts': '–°–æ–∑–¥–∞—Ç—å –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏',
        'payment_for': '–ó–∞ —á—Ç–æ –æ–ø–ª–∞—Ç–∞',
        'show_users': '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
        'hide_users': '–°–∫—Ä—ã—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
        'full_name': '–§–ò–û',
        'address': '–ê–¥—Ä–µ—Å',
        'account_number': '–ù–æ–º–µ—Ä –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á—ë—Ç–∞',
        'save_changes': '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è',
        'housing_type': '–¢–∏–ø –∂–∏–ª—å—è',
        'registered': '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
        'last_login': '–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥',
        'notifications': '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
    },
    'uz': {
        'title': 'Interactive Online Utility Payment',
        'description': 'Welcome to the online platform for convenient payment of your utility bills.',
        'login': 'Login',
        'register': 'Register',
        'logout': 'Logout',
        'username': 'Username',
        'password': 'Password',
        'confirm_password': 'Confirm Password',
        'submit': 'Submit',
        'dashboard': 'Dashboard',
        'welcome_user': 'Welcome,',
        'bills': 'Your Utility Bills',
        'amount': 'Amount',
        'due_date': 'Due Date',
        'status': 'Status',
        'paid': 'Paid',
        'unpaid': 'Unpaid',
        'pay': 'Pay',
        'payment_history': 'Payment History',
        'date': 'Date',
        'language': 'Language',
        'change_lang': 'Change Language',
        'registration': 'Registration',
        'error_user_exists': 'Username already exists',
        'error_password_mismatch': 'Passwords do not match',
        'error_invalid_credentials': 'Invalid username or password',
        'payment_success': 'Payment successful',
        'pay_bill': 'Pay Bill',
        'no_payments': 'No payments made yet.',
        'home': 'Home',
        'news_title_1': 'Electricity Price Increase',
        'news_content_1': 'Starting next month, the electricity tariff will increase by 5%, affecting all households.',
        'news_title_2': 'New Payment Methods',
        'news_content_2': 'We have introduced payments via popular mobile wallets for your convenience.',
        'news_title_3': 'Scheduled Maintenance',
        'news_content_3': 'Our platform will undergo maintenance on the 20th. Please plan your payments accordingly.',
        'news_title_4': 'New Mobile App',
        'news_content_4': 'We are excited to announce the launch of our new mobile application! Now you can manage your utility payments on the go.',
        'select_language': 'Select Language',
        'uzbek': 'Uzbek',
        'russian': 'Russian',
        'english': 'English',
        'passport_number': 'Passport Number & Series',
        'phone_number': 'Phone Number',
        'email': 'Email (optional)',
        'water_supply': 'Water Supply',
        'electricity': 'Electricity',
        'gas_supply': 'Gas Supply',
        'sewage': 'Sewage',
        'heating': 'Heating',
        'waste_disposal': 'Waste Disposal',
        'current_month_info': 'Current Month Information',
        'consumption': 'Consumption',
        'tariff': 'Tariff',
        'total_amount': 'Total Amount',
        'select_month': 'Select Month',
        'select_year': 'Select Year',
        'view': 'View',
        'january': 'January',
        'february': 'February',
        'march': 'March',
        'april': 'April',
        'may': 'May',
        'june': 'June',
        'july': 'July',
        'august': 'August',
        'september': 'September',
        'october': 'October',
        'november': 'November',
        'december': 'December',
        'last_paid_receipts': 'Last Paid Receipts',
        'receipt_number': 'Receipt Number',
        'payment_date': 'Payment Date',
        'login_as_staff': 'Login as Staff',
        'login_as_user': 'Login as User',
        'staff_key': 'Staff Key',
        'login_another_way': 'Login Another Way',
        'choose_auth_method': 'Choose Authentication Method',
        'service_not_connected': 'This service is not yet connected by the student',
        'username_requirements': 'Foydalanuvchi nomi 3-20 belgidan iborat bo\'lishi va faqat harflar, raqamlar va pastki chiziqdan iborat bo\'lishi kerak',
        'password_requirements': 'Parol kamida 8 belgidan iborat bo\'lishi va harflar va raqamlarni o\'z ichiga olishi kerak',
        'passport_requirements': 'Passport raqami 2 ta katta harf va 7 ta raqamdan iborat bo\'lishi kerak',
        'phone_requirements': 'Telefon raqami +998 bilan boshlanishi va 9 ta raqamdan iborat bo\'lishi kerak',
        'username_error': 'Noto\'g\'ri foydalanuvchi nomi formati',
        'password_error': 'Noto\'g\'ri parol formati',
        'password_mismatch': 'Parollar mos kelmaydi',
        'passport_error': 'Noto\'g\'ri passport raqami formati',
        'phone_error': 'Noto\'g\'ri telefon raqami formati',
        'email_error': 'Noto\'g\'ri email formati',
        'registration_success': 'Ro\'yxatdan o\'tish muvaffaqiyatli! Iltimos, tizimga kiring.',
        'username_exists': 'Bunday foydalanuvchi nomi allaqachon mavjud',
        'please_correct_errors': 'Iltimos, formadagi xatolarni tuzating',
        'admin_dashboard': 'Admin paneli',
        'enter_username': 'Foydalanuvchi nomini kiriting',
        'search_user': 'Foydalanuvchini qidirish',
        'user_found': 'Foydalanuvchi ma\'lumotlar bazasida topildi',
        'user_not_found': 'Foydalanuvchi ma\'lumotlar bazasida topilmadi',
        'generate_receipts': 'Generate Receipts',
        'payment_for': 'Nima uchun to\'lov',
        'show_users': '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
        'hide_users': '–°–∫—Ä—ã—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
        'full_name': 'To\'liq ism',
        'address': 'Manzil',
        'account_number': 'Hisob raqami',
        'save_changes': 'O\'zgarishlarni saqlash',
        'housing_type': 'Uy-joy turi',
        'registered': 'Ro\'yxatdan o\'tgan',
        'last_login': 'Oxirgi kirish',
        'notifications': 'Xabarnomalar'
    }
}

def get_db():
    db = getattr(g, '_database', None)
    if db is None:
        db = g._database = sqlite3.connect(DATABASE)
        db.row_factory = sqlite3.Row
    return db

@app.teardown_appcontext
def close_connection(exception):
    db = getattr(g, '_database', None)
    if db is not None:
        db.close()

def query_db(query, args=(), one=False):
    cur = get_db().execute(query, args)
    rv = cur.fetchall()
    cur.close()
    return (rv[0] if rv else None) if one else rv

def init_db():
    with app.app_context():
        db = get_db()
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        db.executescript('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE NOT NULL,
                password TEXT NOT NULL,
                passport TEXT,
                phone TEXT,
                email TEXT,
                is_staff INTEGER DEFAULT 0,
                address TEXT,
                full_name TEXT,
                account_number TEXT
            );
            CREATE TABLE IF NOT EXISTS bills (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                amount REAL NOT NULL,
                due_date TEXT NOT NULL,
                paid INTEGER DEFAULT 0,
                utility_type TEXT NOT NULL,
                month INTEGER,
                year INTEGER,
                FOREIGN KEY(user_id) REFERENCES users(id)
            );
            CREATE TABLE IF NOT EXISTS payments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                bill_id INTEGER NOT NULL,
                amount REAL NOT NULL,
                payment_date TEXT NOT NULL,
                FOREIGN KEY(user_id) REFERENCES users(id),
                FOREIGN KEY(bill_id) REFERENCES bills(id)
            );
            CREATE TABLE IF NOT EXISTS utility_data (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                utility_type TEXT NOT NULL,
                month INTEGER NOT NULL,
                year INTEGER NOT NULL,
                previous_reading REAL,
                current_reading REAL,
                consumption REAL,
                tariff REAL,
                amount REAL,
                paid INTEGER DEFAULT 0,
                generation_date TEXT,
                adjustments TEXT,
                FOREIGN KEY(user_id) REFERENCES users(id)
            );
            CREATE TABLE IF NOT EXISTS waste_receipts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                receipt_number TEXT NOT NULL,
                amount REAL NOT NULL,
                payment_date TEXT NOT NULL,
                paid INTEGER DEFAULT 0,
                FOREIGN KEY(user_id) REFERENCES users(id)
            );
        ''')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –Ω–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –≤ —Ç–∞–±–ª–∏—Ü–µ bills
        cursor = db.execute("PRAGMA table_info(bills)")
        columns = [info[1] for info in cursor.fetchall()]
        
        if 'utility_type' not in columns:
            db.execute('ALTER TABLE bills ADD COLUMN utility_type TEXT')
        if 'month' not in columns:
            db.execute('ALTER TABLE bills ADD COLUMN month INTEGER')
        if 'year' not in columns:
            db.execute('ALTER TABLE bills ADD COLUMN year INTEGER')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –Ω–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –≤ —Ç–∞–±–ª–∏—Ü–µ utility_data
        cursor = db.execute("PRAGMA table_info(utility_data)")
        columns = [info[1] for info in cursor.fetchall()]
        
        new_columns = {
            'previous_reading': 'REAL',
            'current_reading': 'REAL',
            'generation_date': 'TEXT',
            'adjustments': 'TEXT'
        }
        
        for column, type_ in new_columns.items():
            if column not in columns:
                db.execute(f'ALTER TABLE utility_data ADD COLUMN {column} {type_}')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —Å—Ç–æ–ª–±—Ü—ã passport, phone, email, is_staff –≤ —Ç–∞–±–ª–∏—Ü–µ users
        cursor = db.execute("PRAGMA table_info(users)")
        columns = [info[1] for info in cursor.fetchall()]
        
        if 'passport' not in columns:
            db.execute('ALTER TABLE users ADD COLUMN passport TEXT')
        if 'phone' not in columns:
            db.execute('ALTER TABLE users ADD COLUMN phone TEXT')
        if 'email' not in columns:
            db.execute('ALTER TABLE users ADD COLUMN email TEXT')
        if 'is_staff' not in columns:
            db.execute('ALTER TABLE users ADD COLUMN is_staff INTEGER DEFAULT 0')
        if 'address' not in columns:
            db.execute('ALTER TABLE users ADD COLUMN address TEXT')
        if 'full_name' not in columns:
            db.execute('ALTER TABLE users ADD COLUMN full_name TEXT')
        if 'account_number' not in columns:
            db.execute('ALTER TABLE users ADD COLUMN account_number TEXT')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç–æ–ª–±–µ—Ü paid –≤ —Ç–∞–±–ª–∏—Ü–µ waste_receipts
        cursor = db.execute("PRAGMA table_info(waste_receipts)")
        columns = [info[1] for info in cursor.fetchall()]
        if 'paid' not in columns:
            db.execute('ALTER TABLE waste_receipts ADD COLUMN paid INTEGER DEFAULT 0')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π –∞–¥–º–∏–Ω
        admin = query_db('SELECT id FROM users WHERE username = ?', ['admin'], one=True)
        if not admin:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
            pw_hash = generate_password_hash('admin')
            db.execute('INSERT INTO users (username, password, is_staff) VALUES (?, ?, ?)',
                      ('admin', pw_hash, 1))
            db.commit()

        db.commit()

def get_locale():
    lang = session.get('lang', 'ru')
    return lang if lang in translations else 'ru'

def t(key):
    lang = get_locale()
    return translations[lang].get(key, key)

@app.before_request
def load_user():
    g.user = None
    if 'user_id' in session:
        user = query_db('SELECT * FROM users WHERE id = ?', [session['user_id']], one=True)
        g.user = user

@app.route('/')
def index():
    return render_template('index.html', t=t, g=g, lang=get_locale())

@app.route('/change_language', methods=['POST'])
def change_language():
    lang = request.form.get('lang', 'ru')
    if lang in ['ru', 'en']:  # Exclude 'uz' until translations are added
        session['lang'] = lang
    return redirect(request.referrer or url_for('index'))

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        confirm_password = request.form['confirm_password']
        passport = request.form['passport']
        phone = request.form['phone']
        email = request.form['email']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
        if password != confirm_password:
            return render_template('register.html', t=t, error=t('password_mismatch'), lang=get_locale())
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor = get_db().cursor()
        cursor.execute('SELECT * FROM users WHERE username = ?', (username,))
        if cursor.fetchone() is not None:
            return render_template('register.html', t=t, error=t('username_exists'), lang=get_locale())
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞ (2 –±—É–∫–≤—ã + 7 —Ü–∏—Ñ—Ä)
        if not re.match(r'^[A-Z]{2}\d{7}$', passport):
            return render_template('register.html', t=t, error=t('passport_error'), lang=get_locale())
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+998 –∏ 9 —Ü–∏—Ñ—Ä)
        if not re.match(r'^\+998\d{9}$', phone):
            return render_template('register.html', t=t, error=t('phone_error'), lang=get_locale())
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ email (–µ—Å–ª–∏ email —É–∫–∞–∑–∞–Ω)
        if email and not re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$', email):
            return render_template('register.html', t=t, error=t('email_error'), lang=get_locale())
        
        # –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
        hashed_password = generate_password_hash(password)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cursor.execute('''
            INSERT INTO users (username, password, passport, phone, email, is_staff)
            VALUES (?, ?, ?, ?, ?, 0)
        ''', (username, hashed_password, passport, phone, email))
        get_db().commit()
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        flash(t('registration_success'), 'success')
        return redirect(url_for('login'))
    
    return render_template('register.html', t=t, lang=get_locale())

@app.route('/login', methods=['GET', 'POST'])
def login():
    error = None
    if request.method == 'POST':
        username = request.form['username'].strip()
        password = request.form['password']
        staff_key = request.form.get('staff_key', '')
        
        user = query_db('SELECT * FROM users WHERE username = ?', [username], one=True)
        
        if user:
            if user['is_staff']:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                if username == 'admin' and password == 'admin' and staff_key == '22':
                    session['user_id'] = user['id']
                    return redirect(url_for('dashboard'))
                else:
                    error = t('error_invalid_credentials')
            else:
                # –û–±—ã—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if check_password_hash(user['password'], password):
                    session['user_id'] = user['id']
                    return redirect(url_for('dashboard'))
                else:
                    error = t('error_invalid_credentials')
        else:
            error = t('error_invalid_credentials')
            
    return render_template('login.html', t=t, error=error, lang=get_locale())

@app.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('index'))

@app.route('/dashboard', methods=['GET', 'POST'])
def dashboard():
    if not g.user:
        return redirect(url_for('login'))
    user_id = g.user['id']
    db = get_db()
    message = None

    if request.method == 'POST':
        bill_id = request.form.get('bill_id')
        bill = query_db('SELECT * FROM bills WHERE id = ? AND user_id = ? AND paid = 0', (bill_id, user_id), one=True)
        if bill:
            payment_date = datetime.date.today().isoformat()
            db.execute('INSERT INTO payments (user_id, bill_id, amount, payment_date) VALUES (?, ?, ?, ?)', 
                       (user_id, bill['id'], bill['amount'], payment_date))
            db.execute('UPDATE bills SET paid = 1 WHERE id = ?', (bill['id'],))
            db.commit()
            message = t('payment_success')

    bills = query_db('SELECT * FROM bills WHERE user_id = ? ORDER BY due_date ASC', (user_id,))
    payments = query_db('''
        SELECT p.amount, p.payment_date, b.due_date 
        FROM payments p 
        JOIN bills b ON p.bill_id = b.id
        WHERE p.user_id = ?
        ORDER BY p.payment_date DESC
    ''', (user_id,))

    return render_template('dashboard.html', t=t, g=g, bills=bills, payments=payments, message=message, lang=get_locale())

def utility_route(utility_type, title_key):
    def route():
        if not g.user:
            return redirect(url_for('login'))
        user_id = g.user['id']
        current_month = datetime.date.today().month
        current_year = datetime.date.today().year
        
        selected_month = int(request.form.get('month', current_month))
        selected_year = int(request.form.get('year', current_year))
        
        utility_data = query_db('''
            SELECT consumption, tariff, amount, paid 
            FROM utility_data 
            WHERE user_id = ? AND utility_type = ? AND month = ? AND year = ?
        ''', (user_id, utility_type, selected_month, selected_year), one=True)
        
        return render_template('utility.html', t=t, g=g, lang=get_locale(), utility_data=utility_data, 
                               selected_month=selected_month, selected_year=selected_year, current_year=current_year, 
                               utility_type=utility_type, title_key=title_key)
    return route

@app.route('/water_supply', methods=['GET', 'POST'])
def water_supply():
    return utility_route('water', 'water_supply')()

@app.route('/electricity', methods=['GET', 'POST'])
def electricity():
    return utility_route('electricity', 'electricity')()

@app.route('/gas_supply', methods=['GET', 'POST'])
def gas_supply():
    return utility_route('gas', 'gas_supply')()

@app.route('/sewage', methods=['GET', 'POST'])
def sewage():
    return utility_route('sewage', 'sewage')()

@app.route('/heating', methods=['GET', 'POST'])
def heating():
    return utility_route('heating', 'heating')()

@app.route('/waste_disposal', methods=['GET', 'POST'])
def waste_disposal():
    if not g.user:
        return redirect(url_for('login'))
    user_id = g.user['id']
    
    receipts = query_db('SELECT receipt_number, amount, payment_date FROM waste_receipts WHERE user_id = ? ORDER BY payment_date DESC', (user_id,))
    
    return render_template('waste_disposal.html', t=t, g=g, lang=get_locale(), receipts=receipts)

@app.route('/check_user/<username>')
def check_user():
    try:
        if not g.user or not g.user['is_staff']:
            return jsonify({'error': 'Unauthorized'}), 401
            
        user = query_db('SELECT * FROM users WHERE username = ?', [username], one=True)
        print(f"Searching for user: {username}, Found: {user}")  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        
        if user:
            return jsonify({
                'found': True,
                'message': t('user_found'),
                'user': {
                    'username': user['username'],
                    'is_staff': bool(user['is_staff']),
                    'passport': user['passport'],
                    'phone': user['phone'],
                    'email': user['email']
                }
            })
        else:
            return jsonify({
                'found': False,
                'message': t('user_not_found')
            })
    except Exception as e:
        print(f"Error in check_user: {str(e)}")  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        return jsonify({
            'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}'
        }), 500

@app.route('/get_all_users')
def get_all_users():
    try:
        if not g.user or not g.user['is_staff']:
            return jsonify({'error': 'Unauthorized'}), 401
            
        users = query_db('SELECT username, is_staff, passport, phone, email FROM users')
        print(f"Found users: {users}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        
        return jsonify({
            'users': [{
                'username': user['username'],
                'is_staff': bool(user['is_staff']),
                'passport': user['passport'],
                'phone': user['phone'],
                'email': user['email']
            } for user in users]
        })
    except Exception as e:
        print(f"Error in get_all_users: {str(e)}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        return jsonify({
            'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}'
        }), 500

@app.route('/create_test_users', methods=['POST'])
def create_test_users():
    try:
        if not g.user or not g.user['is_staff']:
            return jsonify({'error': 'Unauthorized'}), 401
        
        test_users = [
            ('AzizTest', 'pass123', 'AA1234567', '+998901234567', 'aziz.test@example.com', '–≥. –¢–∞—à–∫–µ–Ω—Ç, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 12, –∫–≤. 45', '–ê–∑–∏–∑–æ–≤ –ê–∑–∏–∑ –ê–∑–∏–∑–æ–≤–∏—á', '123456789'),
            ('BekzodTest', 'pass123', 'BB1234567', '+998902345678', 'bekzod.test@example.com', '–≥. –°–∞–º–∞—Ä–∫–∞–Ω–¥, —É–ª. –û–±—Ä–∞–∑—Ü–æ–≤–∞—è, –¥. 5, –∫–≤. 10', '–ë–µ–∫–∑–æ–¥–æ–≤ –ë–µ–∫–∑–æ–¥ –ë–µ–∫–∑–æ–¥–æ–≤–∏—á', '987654321'),
            ('ArturTest', 'pass123', 'CC1234567', '+998903456789', 'artur.test@example.com', '–≥. –ë—É—Ö–∞—Ä–∞, —É–ª. –£—á–µ–±–Ω–∞—è, –¥. 7, –∫–≤. 22', '–ê—Ä—Ç—É—Ä–æ–≤ –ê—Ä—Ç—É—Ä –ê—Ä—Ç—É—Ä–æ–≤–∏—á', '112233445')
        ]
        
        db = get_db()
        created_users = []
        
        for username, password, passport, phone, email, address, full_name, account_number in test_users:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                existing_user = query_db('SELECT id FROM users WHERE username = ?', [username], one=True)
                if not existing_user:
                    pw_hash = generate_password_hash(password)
                    db.execute('''
                        INSERT INTO users (username, password, passport, phone, email, is_staff, address, full_name, account_number)
                        VALUES (?, ?, ?, ?, ?, 0, ?, ?, ?)
                    ''', (username, pw_hash, passport, phone, email, address, full_name, account_number))
                    created_users.append(username)
            except Exception as e:
                print(f"Error creating user {username}: {str(e)}")
                continue
        
        db.commit()
        
        if created_users:
            return jsonify({
                'message': f'–°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {", ".join(created_users)}'
            })
        else:
            return jsonify({
                'message': '–í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç'
            })
    except Exception as e:
        print(f"Error in create_test_users: {str(e)}")
        return jsonify({
            'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}'
        }), 500

@app.route('/delete_test_users', methods=['POST'])
def delete_test_users():
    try:
        if not g.user or not g.user['is_staff']:
            return jsonify({'error': 'Unauthorized'}), 401
        
        test_usernames = ['AzizTest', 'BekzodTest', 'ArturTest']
        db = get_db()
        deleted_users = []
        
        for username in test_usernames:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                existing_user = query_db('SELECT id FROM users WHERE username = ?', [username], one=True)
                if existing_user:
                    db.execute('DELETE FROM users WHERE username = ? AND is_staff = 0', [username])
                    deleted_users.append(username)
            except Exception as e:
                print(f"Error deleting user {username}: {str(e)}")
                continue
        
        db.commit()
        
        if deleted_users:
            return jsonify({
                'message': f'–£–¥–∞–ª–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {", ".join(deleted_users)}'
            })
        else:
            return jsonify({
                'message': '–¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
            })
    except Exception as e:
        print(f"Error in delete_test_users: {str(e)}")
        return jsonify({
            'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}'
        }), 500

@app.route('/payments')
@login_required
def payments():
    # Get payment history
    payments = query_db('''
        SELECT p.id, p.amount, p.payment_date, b.utility_type
        FROM payments p
        JOIN bills b ON p.bill_id = b.id
        WHERE p.user_id = ? AND b.utility_type IS NOT NULL
        ORDER BY p.payment_date DESC
    ''', (g.user['id'],))

    # Get unpaid bills for each utility type with consumption data
    water_data = query_db('''
        SELECT b.*, ud.previous_reading, ud.current_reading, ud.consumption, ud.tariff
        FROM bills b
        JOIN utility_data ud ON b.user_id = ud.user_id 
            AND b.utility_type = ud.utility_type 
            AND b.month = ud.month 
            AND b.year = ud.year
        WHERE b.user_id = ? AND b.utility_type = 'water' AND b.paid = 0
        ORDER BY b.due_date DESC
        LIMIT 1
    ''', (g.user['id'],), one=True)

    electricity_data = query_db('''
        SELECT b.*, ud.previous_reading, ud.current_reading, ud.consumption, ud.tariff
        FROM bills b
        JOIN utility_data ud ON b.user_id = ud.user_id 
            AND b.utility_type = ud.utility_type 
            AND b.month = ud.month 
            AND b.year = ud.year
        WHERE b.user_id = ? AND b.utility_type = 'electricity' AND b.paid = 0
        ORDER BY b.due_date DESC
        LIMIT 1
    ''', (g.user['id'],), one=True)

    gas_data = query_db('''
        SELECT b.*, ud.previous_reading, ud.current_reading, ud.consumption, ud.tariff
        FROM bills b
        JOIN utility_data ud ON b.user_id = ud.user_id 
            AND b.utility_type = ud.utility_type 
            AND b.month = ud.month 
            AND b.year = ud.year
        WHERE b.user_id = ? AND b.utility_type = 'gas' AND b.paid = 0
        ORDER BY b.due_date DESC
        LIMIT 1
    ''', (g.user['id'],), one=True)

    heating_data = query_db('''
        SELECT b.*, ud.previous_reading, ud.current_reading, ud.consumption, ud.tariff
        FROM bills b
        JOIN utility_data ud ON b.user_id = ud.user_id 
            AND b.utility_type = ud.utility_type 
            AND b.month = ud.month 
            AND b.year = ud.year
        WHERE b.user_id = ? AND b.utility_type = 'heating' AND b.paid = 0
        ORDER BY b.due_date DESC
        LIMIT 1
    ''', (g.user['id'],), one=True)

    waste_data = query_db('''
        SELECT b.*
        FROM bills b
        WHERE b.user_id = ? AND b.utility_type = 'waste' AND b.paid = 0
        ORDER BY b.due_date DESC
        LIMIT 1
    ''', (g.user['id'],), one=True)

    current_date = datetime.datetime.now()
    
    return render_template('payments.html', 
                         t=t,
                         g=g,
                         lang=get_locale(),
                         payments=payments,
                         water_data=water_data,
                         electricity_data=electricity_data,
                         gas_data=gas_data,
                         heating_data=heating_data,
                         waste_data=waste_data,
                         current_date=current_date)

@app.route('/pay_water', methods=['POST'])
def pay_water():
    if not g.user:
        return redirect(url_for('login'))
    user_id = g.user['id']
    current_month = datetime.date.today().month
    current_year = datetime.date.today().year
    
    db = get_db()
    db.execute('''
        UPDATE utility_data 
        SET paid = 1 
        WHERE user_id = ? AND utility_type = ? AND month = ? AND year = ?
    ''', (user_id, 'water', current_month, current_year))
    db.commit()
    
    return redirect(url_for('payments'))

@app.route('/pay_electricity', methods=['POST'])
def pay_electricity():
    if not g.user:
        return redirect(url_for('login'))
    user_id = g.user['id']
    current_month = datetime.date.today().month
    current_year = datetime.date.today().year
    
    db = get_db()
    db.execute('''
        UPDATE utility_data 
        SET paid = 1 
        WHERE user_id = ? AND utility_type = ? AND month = ? AND year = ?
    ''', (user_id, 'electricity', current_month, current_year))
    db.commit()
    
    return redirect(url_for('payments'))

@app.route('/pay_gas', methods=['POST'])
def pay_gas():
    if not g.user:
        return redirect(url_for('login'))
    user_id = g.user['id']
    current_month = datetime.date.today().month
    current_year = datetime.date.today().year
    
    db = get_db()
    db.execute('''
        UPDATE utility_data 
        SET paid = 1 
        WHERE user_id = ? AND utility_type = ? AND month = ? AND year = ?
    ''', (user_id, 'gas', current_month, current_year))
    db.commit()
    
    return redirect(url_for('payments'))

@app.route('/pay_heating', methods=['POST'])
def pay_heating():
    if not g.user:
        return redirect(url_for('login'))
    user_id = g.user['id']
    current_month = datetime.date.today().month
    current_year = datetime.date.today().year
    
    db = get_db()
    db.execute('''
        UPDATE utility_data 
        SET paid = 1 
        WHERE user_id = ? AND utility_type = ? AND month = ? AND year = ?
    ''', (user_id, 'heating', current_month, current_year))
    db.commit()
    
    return redirect(url_for('payments'))

@app.route('/pay_waste', methods=['POST'])
def pay_waste():
    if not g.user:
        return redirect(url_for('login'))
    user_id = g.user['id']
    current_month = datetime.date.today().month
    current_year = datetime.date.today().year
    
    db = get_db()
    db.execute('''
        UPDATE waste_receipts 
        SET paid = 1 
        WHERE user_id = ? AND payment_date LIKE ?
    ''', (user_id, f'{current_year}-{current_month:02d}-%'))
    db.commit()
    
    return redirect(url_for('payments'))

@app.route('/generate_receipts', methods=['POST'])
def generate_receipts():
    if not g.user:
        return redirect(url_for('login'))
    
    user_id = g.user['id']
    current_date = datetime.date.today()
    next_month = current_date.replace(day=1) + datetime.timedelta(days=32)
    next_month = next_month.replace(day=1)
    
    db = get_db()
    
    # Utility companies and their receipt titles
    utilities = {
        'water': {
            'company': '–£–∑ "–í–æ–¥–æ–∫–∞–Ω–∞–ª"',
            'title': '–ö–≤–∏—Ç–∞–Ω—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è',
            'unit': '–º¬≥'
        },
        'electricity': {
            'company': '–£–∑ "–≠–Ω–µ—Ä–≥–æ—Å–±—ã—Ç"',
            'title': '–ö–≤–∏—Ç–∞–Ω—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏',
            'unit': '–∫–í—Ç¬∑—á'
        },
        'gas': {
            'company': '–£–∑ "–ì–∞–∑–ø—Ä–æ–º"',
            'title': '–ö–≤–∏—Ç–∞–Ω—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ –≥–∞–∑–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è',
            'unit': '–º¬≥'
        },
        'heating': {
            'company': '–£–∑ "–¢–µ–ø–ª–æ—Å–µ—Ç—å"',
            'title': '–ö–≤–∏—Ç–∞–Ω—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ –æ—Ç–æ–ø–ª–µ–Ω–∏—è',
            'unit': '–ì–∫–∞–ª'
        }
    }
    
    # Generate receipts for each utility
    for utility_type, info in utilities.items():
        # Generate two receipts for each utility - one paid, one unpaid
        for is_paid in [True, False]:
            # Generate random readings
            previous_reading = random.randint(1000, 10000)
            current_reading = previous_reading + random.randint(100, 500)
            consumption = current_reading - previous_reading
            tariff = random.randint(400, 1000)
            amount = consumption * tariff
            
            # Create utility data with detailed information
            db.execute('''
                INSERT INTO utility_data 
                (user_id, utility_type, month, year, 
                previous_reading, current_reading, consumption, 
                tariff, amount, paid, generation_date)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                user_id,
                utility_type,
                next_month.month,
                next_month.year,
                previous_reading,
                current_reading,
                consumption,
                tariff,
                amount,
                1 if is_paid else 0,
                "2025-04-15"
            ))
            
            # Create bill
            db.execute('''
                INSERT INTO bills 
                (user_id, amount, due_date, paid, utility_type, month, year)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (
                user_id,
                amount,
                next_month.isoformat(),
                1 if is_paid else 0,
                utility_type,
                next_month.month,
                next_month.year
            ))
            
            # If paid, create payment record
            if is_paid:
                bill_id = db.execute('SELECT last_insert_rowid()').fetchone()[0]
                db.execute('''
                    INSERT INTO payments 
                    (user_id, bill_id, amount, payment_date)
                    VALUES (?, ?, ?, ?)
                ''', (
                    user_id,
                    bill_id,
                    amount,
                    current_date.isoformat()
                ))
    
    db.commit()
    return redirect(url_for('payments'))

@app.route('/edit_user/<username>', methods=['POST'])
def edit_user(username):
    if not g.user or not g.user['is_staff']:
        return jsonify({'error': 'Unauthorized'}), 401
    data = request.get_json()
    user = query_db('SELECT * FROM users WHERE username = ?', [username], one=True)
    if not user:
        return jsonify({'error': 'User not found'}), 404

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—É—Å—Ç—ã–µ
    fields = ['full_name', 'address', 'account_number', 'passport', 'phone', 'email']
    updates = []
    values = []
    for field in fields:
        if data.get(field):
            updates.append(f'{field} = ?')
            values.append(data[field])
    if not updates:
        return jsonify({'message': '–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π'})
    values.append(username)
    get_db().execute(f'UPDATE users SET {", ".join(updates)} WHERE username = ?', values)
    get_db().commit()
    return jsonify({'message': '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã'})

@app.route('/admin/edit_user/<username>')
def admin_edit_user(username):
    if not g.user or not g.user['is_staff']:
        return redirect(url_for('login'))
    user = query_db('SELECT * FROM users WHERE username = ?', [username], one=True)
    if not user:
        return render_template('admin_edit_user.html', error='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', t=t, lang=get_locale())
    return render_template('admin_edit_user.html', user=user, t=t, lang=get_locale())

# created by artur

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:

–°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:
–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤—Ö–æ–¥–∞
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª)
–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π —á–µ—Ä–µ–∑ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
–ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç—å:
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç—Ä–µ—Ö —è–∑—ã–∫–æ–≤ (—Ä—É—Å—Å–∫–∏–π, –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, —É–∑–±–µ–∫—Å–∫–∏–π)
–°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —á–µ—Ä–µ–∑ —Å–ª–æ–≤–∞—Ä—å translations
–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤
–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä @login_required
–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏—è–º